// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocoalBufferRawDefinition.proto

#ifndef PROTOBUF_protocoalBufferRawDefinition_2eproto__INCLUDED
#define PROTOBUF_protocoalBufferRawDefinition_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace wewriteapp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocoalBufferRawDefinition_2eproto();
void protobuf_AssignDesc_protocoalBufferRawDefinition_2eproto();
void protobuf_ShutdownFile_protocoalBufferRawDefinition_2eproto();

class EventBuffer;

enum EventBuffer_EventType {
  EventBuffer_EventType_UNKNOWN = 0,
  EventBuffer_EventType_INSERT = 1,
  EventBuffer_EventType_DELETE = 2,
  EventBuffer_EventType_UNDO = 3,
  EventBuffer_EventType_REDO = 4,
  EventBuffer_EventType_LOCK_REQUEST = 5,
  EventBuffer_EventType_RECEIPT_CONFIRMATION = 6
};
bool EventBuffer_EventType_IsValid(int value);
const EventBuffer_EventType EventBuffer_EventType_EventType_MIN = EventBuffer_EventType_UNKNOWN;
const EventBuffer_EventType EventBuffer_EventType_EventType_MAX = EventBuffer_EventType_RECEIPT_CONFIRMATION;
const int EventBuffer_EventType_EventType_ARRAYSIZE = EventBuffer_EventType_EventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EventBuffer_EventType_descriptor();
inline const ::std::string& EventBuffer_EventType_Name(EventBuffer_EventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EventBuffer_EventType_descriptor(), value);
}
inline bool EventBuffer_EventType_Parse(
    const ::std::string& name, EventBuffer_EventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EventBuffer_EventType>(
    EventBuffer_EventType_descriptor(), name, value);
}
// ===================================================================

class EventBuffer : public ::google::protobuf::Message {
 public:
  EventBuffer();
  virtual ~EventBuffer();

  EventBuffer(const EventBuffer& from);

  inline EventBuffer& operator=(const EventBuffer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EventBuffer& default_instance();

  void Swap(EventBuffer* other);

  // implements Message ----------------------------------------------

  EventBuffer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EventBuffer& from);
  void MergeFrom(const EventBuffer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef EventBuffer_EventType EventType;
  static const EventType UNKNOWN = EventBuffer_EventType_UNKNOWN;
  static const EventType INSERT = EventBuffer_EventType_INSERT;
  static const EventType DELETE = EventBuffer_EventType_DELETE;
  static const EventType UNDO = EventBuffer_EventType_UNDO;
  static const EventType REDO = EventBuffer_EventType_REDO;
  static const EventType LOCK_REQUEST = EventBuffer_EventType_LOCK_REQUEST;
  static const EventType RECEIPT_CONFIRMATION = EventBuffer_EventType_RECEIPT_CONFIRMATION;
  static inline bool EventType_IsValid(int value) {
    return EventBuffer_EventType_IsValid(value);
  }
  static const EventType EventType_MIN =
    EventBuffer_EventType_EventType_MIN;
  static const EventType EventType_MAX =
    EventBuffer_EventType_EventType_MAX;
  static const int EventType_ARRAYSIZE =
    EventBuffer_EventType_EventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EventType_descriptor() {
    return EventBuffer_EventType_descriptor();
  }
  static inline const ::std::string& EventType_Name(EventType value) {
    return EventBuffer_EventType_Name(value);
  }
  static inline bool EventType_Parse(const ::std::string& name,
      EventType* value) {
    return EventBuffer_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string contents = 1;
  inline bool has_contents() const;
  inline void clear_contents();
  static const int kContentsFieldNumber = 1;
  inline const ::std::string& contents() const;
  inline void set_contents(const ::std::string& value);
  inline void set_contents(const char* value);
  inline void set_contents(const char* value, size_t size);
  inline ::std::string* mutable_contents();
  inline ::std::string* release_contents();
  inline void set_allocated_contents(::std::string* contents);

  // required int32 startLocation = 2;
  inline bool has_startlocation() const;
  inline void clear_startlocation();
  static const int kStartLocationFieldNumber = 2;
  inline ::google::protobuf::int32 startlocation() const;
  inline void set_startlocation(::google::protobuf::int32 value);

  // optional int32 lengthUsed = 3;
  inline bool has_lengthused() const;
  inline void clear_lengthused();
  static const int kLengthUsedFieldNumber = 3;
  inline ::google::protobuf::int32 lengthused() const;
  inline void set_lengthused(::google::protobuf::int32 value);

  // optional .wewriteapp.EventBuffer.EventType eventType = 4 [default = UNKNOWN];
  inline bool has_eventtype() const;
  inline void clear_eventtype();
  static const int kEventTypeFieldNumber = 4;
  inline ::wewriteapp::EventBuffer_EventType eventtype() const;
  inline void set_eventtype(::wewriteapp::EventBuffer_EventType value);

  // @@protoc_insertion_point(class_scope:wewriteapp.EventBuffer)
 private:
  inline void set_has_contents();
  inline void clear_has_contents();
  inline void set_has_startlocation();
  inline void clear_has_startlocation();
  inline void set_has_lengthused();
  inline void clear_has_lengthused();
  inline void set_has_eventtype();
  inline void clear_has_eventtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* contents_;
  ::google::protobuf::int32 startlocation_;
  ::google::protobuf::int32 lengthused_;
  int eventtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_protocoalBufferRawDefinition_2eproto();
  friend void protobuf_AssignDesc_protocoalBufferRawDefinition_2eproto();
  friend void protobuf_ShutdownFile_protocoalBufferRawDefinition_2eproto();

  void InitAsDefaultInstance();
  static EventBuffer* default_instance_;
};
// ===================================================================


// ===================================================================

// EventBuffer

// optional string contents = 1;
inline bool EventBuffer::has_contents() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EventBuffer::set_has_contents() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EventBuffer::clear_has_contents() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EventBuffer::clear_contents() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    contents_->clear();
  }
  clear_has_contents();
}
inline const ::std::string& EventBuffer::contents() const {
  return *contents_;
}
inline void EventBuffer::set_contents(const ::std::string& value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void EventBuffer::set_contents(const char* value) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(value);
}
inline void EventBuffer::set_contents(const char* value, size_t size) {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  contents_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EventBuffer::mutable_contents() {
  set_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    contents_ = new ::std::string;
  }
  return contents_;
}
inline ::std::string* EventBuffer::release_contents() {
  clear_has_contents();
  if (contents_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contents_;
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EventBuffer::set_allocated_contents(::std::string* contents) {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (contents) {
    set_has_contents();
    contents_ = contents;
  } else {
    clear_has_contents();
    contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 startLocation = 2;
inline bool EventBuffer::has_startlocation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EventBuffer::set_has_startlocation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EventBuffer::clear_has_startlocation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EventBuffer::clear_startlocation() {
  startlocation_ = 0;
  clear_has_startlocation();
}
inline ::google::protobuf::int32 EventBuffer::startlocation() const {
  return startlocation_;
}
inline void EventBuffer::set_startlocation(::google::protobuf::int32 value) {
  set_has_startlocation();
  startlocation_ = value;
}

// optional int32 lengthUsed = 3;
inline bool EventBuffer::has_lengthused() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EventBuffer::set_has_lengthused() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EventBuffer::clear_has_lengthused() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EventBuffer::clear_lengthused() {
  lengthused_ = 0;
  clear_has_lengthused();
}
inline ::google::protobuf::int32 EventBuffer::lengthused() const {
  return lengthused_;
}
inline void EventBuffer::set_lengthused(::google::protobuf::int32 value) {
  set_has_lengthused();
  lengthused_ = value;
}

// optional .wewriteapp.EventBuffer.EventType eventType = 4 [default = UNKNOWN];
inline bool EventBuffer::has_eventtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EventBuffer::set_has_eventtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EventBuffer::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EventBuffer::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::wewriteapp::EventBuffer_EventType EventBuffer::eventtype() const {
  return static_cast< ::wewriteapp::EventBuffer_EventType >(eventtype_);
}
inline void EventBuffer::set_eventtype(::wewriteapp::EventBuffer_EventType value) {
  assert(::wewriteapp::EventBuffer_EventType_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace wewriteapp

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::wewriteapp::EventBuffer_EventType>() {
  return ::wewriteapp::EventBuffer_EventType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocoalBufferRawDefinition_2eproto__INCLUDED
