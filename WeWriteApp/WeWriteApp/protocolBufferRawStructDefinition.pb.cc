// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocolBufferRawStructDefinition.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "protocolBufferRawStructDefinition.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace wewriteapp {

namespace {

const ::google::protobuf::Descriptor* EventBuffer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventBuffer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EventBuffer_EventType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_protocolBufferRawStructDefinition_2eproto() {
  protobuf_AddDesc_protocolBufferRawStructDefinition_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "protocolBufferRawStructDefinition.proto");
  GOOGLE_CHECK(file != NULL);
  EventBuffer_descriptor_ = file->message_type(0);
  static const int EventBuffer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBuffer, participantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBuffer, startlocation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBuffer, contents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBuffer, lengthused_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBuffer, eventtype_),
  };
  EventBuffer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventBuffer_descriptor_,
      EventBuffer::default_instance_,
      EventBuffer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBuffer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventBuffer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventBuffer));
  EventBuffer_EventType_descriptor_ = EventBuffer_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_protocolBufferRawStructDefinition_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventBuffer_descriptor_, &EventBuffer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_protocolBufferRawStructDefinition_2eproto() {
  delete EventBuffer::default_instance_;
  delete EventBuffer_reflection_;
}

void protobuf_AddDesc_protocolBufferRawStructDefinition_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\'protocolBufferRawStructDefinition.prot"
    "o\022\nwewriteapp\"\212\002\n\013EventBuffer\022\025\n\rpartici"
    "pantID\030\001 \002(\005\022\025\n\rstartLocation\030\002 \002(\005\022\020\n\010c"
    "ontents\030\003 \001(\t\022\022\n\nlengthUsed\030\004 \001(\005\022=\n\teve"
    "ntType\030\005 \001(\0162!.wewriteapp.EventBuffer.Ev"
    "entType:\007UNKNOWN\"h\n\tEventType\022\013\n\007UNKNOWN"
    "\020\000\022\n\n\006INSERT\020\001\022\n\n\006DELETE\020\002\022\010\n\004UNDO\020\003\022\010\n\004"
    "REDO\020\004\022\020\n\014LOCK_REQUEST\020\005\022\020\n\014LOCK_RELEASE"
    "\020\006", 322);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocolBufferRawStructDefinition.proto", &protobuf_RegisterTypes);
  EventBuffer::default_instance_ = new EventBuffer();
  EventBuffer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_protocolBufferRawStructDefinition_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_protocolBufferRawStructDefinition_2eproto {
  StaticDescriptorInitializer_protocolBufferRawStructDefinition_2eproto() {
    protobuf_AddDesc_protocolBufferRawStructDefinition_2eproto();
  }
} static_descriptor_initializer_protocolBufferRawStructDefinition_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* EventBuffer_EventType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventBuffer_EventType_descriptor_;
}
bool EventBuffer_EventType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EventBuffer_EventType EventBuffer::UNKNOWN;
const EventBuffer_EventType EventBuffer::INSERT;
const EventBuffer_EventType EventBuffer::DELETE;
const EventBuffer_EventType EventBuffer::UNDO;
const EventBuffer_EventType EventBuffer::REDO;
const EventBuffer_EventType EventBuffer::LOCK_REQUEST;
const EventBuffer_EventType EventBuffer::LOCK_RELEASE;
const EventBuffer_EventType EventBuffer::EventType_MIN;
const EventBuffer_EventType EventBuffer::EventType_MAX;
const int EventBuffer::EventType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int EventBuffer::kParticipantIDFieldNumber;
const int EventBuffer::kStartLocationFieldNumber;
const int EventBuffer::kContentsFieldNumber;
const int EventBuffer::kLengthUsedFieldNumber;
const int EventBuffer::kEventTypeFieldNumber;
#endif  // !_MSC_VER

EventBuffer::EventBuffer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventBuffer::InitAsDefaultInstance() {
}

EventBuffer::EventBuffer(const EventBuffer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventBuffer::SharedCtor() {
  _cached_size_ = 0;
  participantid_ = 0;
  startlocation_ = 0;
  contents_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lengthused_ = 0;
  eventtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventBuffer::~EventBuffer() {
  SharedDtor();
}

void EventBuffer::SharedDtor() {
  if (contents_ != &::google::protobuf::internal::kEmptyString) {
    delete contents_;
  }
  if (this != default_instance_) {
  }
}

void EventBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventBuffer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventBuffer_descriptor_;
}

const EventBuffer& EventBuffer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_protocolBufferRawStructDefinition_2eproto();
  return *default_instance_;
}

EventBuffer* EventBuffer::default_instance_ = NULL;

EventBuffer* EventBuffer::New() const {
  return new EventBuffer;
}

void EventBuffer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    participantid_ = 0;
    startlocation_ = 0;
    if (has_contents()) {
      if (contents_ != &::google::protobuf::internal::kEmptyString) {
        contents_->clear();
      }
    }
    lengthused_ = 0;
    eventtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 participantID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &participantid_)));
          set_has_participantid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_startLocation;
        break;
      }

      // required int32 startLocation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startLocation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startlocation_)));
          set_has_startlocation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_contents;
        break;
      }

      // optional string contents = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contents()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contents().data(), this->contents().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lengthUsed;
        break;
      }

      // optional int32 lengthUsed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lengthUsed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lengthused_)));
          set_has_lengthused();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_eventType;
        break;
      }

      // optional .wewriteapp.EventBuffer.EventType eventType = 5 [default = UNKNOWN];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::wewriteapp::EventBuffer_EventType_IsValid(value)) {
            set_eventtype(static_cast< ::wewriteapp::EventBuffer_EventType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 participantID = 1;
  if (has_participantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->participantid(), output);
  }

  // required int32 startLocation = 2;
  if (has_startlocation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startlocation(), output);
  }

  // optional string contents = 3;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contents().data(), this->contents().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->contents(), output);
  }

  // optional int32 lengthUsed = 4;
  if (has_lengthused()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lengthused(), output);
  }

  // optional .wewriteapp.EventBuffer.EventType eventType = 5 [default = UNKNOWN];
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->eventtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventBuffer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 participantID = 1;
  if (has_participantid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->participantid(), target);
  }

  // required int32 startLocation = 2;
  if (has_startlocation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startlocation(), target);
  }

  // optional string contents = 3;
  if (has_contents()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contents().data(), this->contents().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->contents(), target);
  }

  // optional int32 lengthUsed = 4;
  if (has_lengthused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lengthused(), target);
  }

  // optional .wewriteapp.EventBuffer.EventType eventType = 5 [default = UNKNOWN];
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->eventtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventBuffer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 participantID = 1;
    if (has_participantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->participantid());
    }

    // required int32 startLocation = 2;
    if (has_startlocation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startlocation());
    }

    // optional string contents = 3;
    if (has_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contents());
    }

    // optional int32 lengthUsed = 4;
    if (has_lengthused()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lengthused());
    }

    // optional .wewriteapp.EventBuffer.EventType eventType = 5 [default = UNKNOWN];
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventBuffer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventBuffer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventBuffer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventBuffer::MergeFrom(const EventBuffer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_participantid()) {
      set_participantid(from.participantid());
    }
    if (from.has_startlocation()) {
      set_startlocation(from.startlocation());
    }
    if (from.has_contents()) {
      set_contents(from.contents());
    }
    if (from.has_lengthused()) {
      set_lengthused(from.lengthused());
    }
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventBuffer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventBuffer::CopyFrom(const EventBuffer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBuffer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EventBuffer::Swap(EventBuffer* other) {
  if (other != this) {
    std::swap(participantid_, other->participantid_);
    std::swap(startlocation_, other->startlocation_);
    std::swap(contents_, other->contents_);
    std::swap(lengthused_, other->lengthused_);
    std::swap(eventtype_, other->eventtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventBuffer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventBuffer_descriptor_;
  metadata.reflection = EventBuffer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace wewriteapp

// @@protoc_insertion_point(global_scope)
